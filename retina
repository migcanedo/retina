<<<<<<< HEAD
#! /usr/bin/ruby
# Universidad Simon Bolivar
# Trimestre Enero-Marzo 2017
# Traductores e Interpretadores [CI3725]
# Rafael Cisneros, 13-11156
# Miguel Canedo, 13-10214
# Proyecto, Main

require_relative 'Parser'
require_relative 'funcRTN'

def main
	# Comprobamos si el archivo a correr existe y tiene una extension correcta
	comprobar_archivo(ARGV[0])
	input = File::read(ARGV[0])

	# Creamos el Lexer
	lexer = Lexer.new(input)
	
	begin
		# Recorremos la entrada con el Lexer para certificar que este libre deerrores lexicograficos.
		lexer_error = false
		t = true
		while t do
			begin
				t = lexer.obtener_token
			rescue LexicographError => e
				lexer_error = true	
			end	
		end

		# Si se consiguieron errores con el lexer, se aborta el programa.
		if lexer_error
			puts lexer
			return
		end

		# Ahora creamos el Parser y el AST que se imprimira para revisar la gramatica de la entrada.
		lexer = Lexer.new(input)
		parser = Parser.new 
      		ast = parser.parse(lexer)
		
		# Creamos un arreglo para almacenar los Errores de Contexto.
		$erroresContexto = []

		# Revisamos el contexto del AST y creamos la Tabla de Simbolos.
		ast.check()

		# Si el arreglo de errores de contexto es vacio, se procede a simular la
		# corrida del AST
		if $erroresContexto.empty?
			begin
				ast.run()

			# Si se consigue un error en tiempo de corrida, se aborta el programa
			# y se imprime el error
			rescue DynamicError => e
				puts e
				return
			end
			# Al no  conseguirse errores de corrida, se procede a dibujar la imagen
			# indicada por el programa
			nombreArchivo = ARGV[0][0..-4] + "pbm"
			File.open(nombreArchivo, "w") do | f |
				f.puts "P1\n"
				f.puts "##{nombreArchivo}"
				f.puts "1001 1001\n"

				$matrix.each do | filas |
					s = ""
					filas.each do | columnas |
						s += "#{columnas} "
					end
					f.puts s
				end
			end
		else
		# Si hay errores de contexto, se retornan todos
			puts $erroresContexto
			return
		end

      	# En caso de existir un error sintactico, se reporta el primero conseguido y se aborta el programa.
	rescue SyntacticError => e
		puts e
		return
	end

end

main
=======
#! /usr/bin/ruby
# Universidad Simon Bolivar
# Trimestre Enero-Marzo 2017
# Traductores e Interpretadores [CI3725]
# Rafael Cisneros, 13-11156
# Miguel Canedo, 13-10214
# Proyecto, Main

require_relative 'Parser'
require_relative 'funcRTN'

def main
	# Comprobamos si el archivo a correr existe y tiene una extension correcta
	comprobar_archivo(ARGV[0])
	input = File::read(ARGV[0])

	# Creamos el Lexer
	lexer = Lexer.new(input)
	
	begin
		# Recorremos la entrada con el Lexer para certificar que este libre deerrores lexicograficos.
		lexer_error = false
		t = true
		while t do
			begin
				t = lexer.obtener_token
			rescue LexicographError => e
				lexer_error = true	
			end	
		end

		# Si se consiguieron errores con el lexer, se aborta el programa.
		if lexer_error
			puts lexer
			return
		end

		# Ahora creamos el Parser y el AST que se imprimira para revisar la gramatica de la entrada.
		lexer = Lexer.new(input)
		parser = Parser.new 
      		ast = parser.parse(lexer)
		
		# Creamos un arreglo para almacenar los Errores de Contexto.
		$erroresContexto = []

		# Revisamos el contexto del AST y creamos la Tabla de Simbolos.
		ast.check()

		# Si el arreglo de errores de contexto es vacio, se procede a simular la
		# corrida del AST
		if $erroresContexto.empty?
			begin
				ast.run()

			# Si se consigue un error en tiempo de corrida, se aborta el programa
			# y se imprime el error
			rescue DynamicError => e
				puts e
				return
			end
			# Al no  conseguirse errores de corrida, se procede a dibujar la imagen
			# indicada por el programa
			nombreArchivo = ARGV[0][0..-4] + "pbm"
			File.open(nombreArchivo, "w") do | f |
				f.puts "P1\n"
				f.puts "##{nombreArchivo}"
				f.puts "1001 1001\n"

				$matrix.each do | filas |
					s = ""
					filas.each do | columnas |
						s += "#{columnas} "
					end
					f.puts s
				end
			end
		else
		# Si hay errores de contexto, se retornan todos
			puts $erroresContexto
			return
		end

      	# En caso de existir un error sintactico, se reporta el primero conseguido y se aborta el programa.
	rescue SyntacticError => e
		puts e
		return
	end

end

main
>>>>>>> 776661ccc006e775a4d59ab38bae03804782468d
# retina
